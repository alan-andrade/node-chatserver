// Generated by CoffeeScript 1.3.1
(function() {
  var User, io, uuid;

  io = require('socket.io').listen(8080);

  uuid = require('node-uuid');

  io.sockets.on('connection', function(socket) {
    socket.emit('user.uid');
    socket.on('user.uid=', function(uid) {
      var user;
      user = User.find(uid);
      if (user != null) {
        user.activate();
        user.save();
        socket.set('uid', user.uid);
        socket.emit('user.create', {
          name: user.name,
          uid: user.uid
        });
      } else {
        socket.emit('user.name');
      }
    });
    socket.on('user.name=', function(name) {
      var user;
      user = new User(name);
      user.save();
      socket.set('uid', user.uid);
      socket.emit('user.create', {
        name: user.name,
        uid: user.uid
      });
    });
    socket.on('user.speak', function(msg) {
      return socket.broadcast.emit('user.speak', msg);
    });
    return socket.on('disconnect', function() {
      return socket.get('uid', function(err, uid) {
        var user;
        user = User.find(uid);
        if (user != null) {
          return user.deactivate();
        }
      });
    });
  });

  User = (function() {

    User.name = 'User';

    function User(name) {
      this.name = name;
      this.online = true;
      this.uid = uuid.v1();
    }

    User.find = function(uid) {
      return User.source[uid];
    };

    User.prototype.save = function() {
      User.source[this.uid] = this;
      return User.hooks();
    };

    User.prototype.activate = function() {
      this.online = true;
      return User.hooks();
    };

    User.prototype.deactivate = function() {
      this.online = false;
      return User.hooks();
    };

    User.hooks = function() {
      return io.sockets.emit('users.refresh', User.source);
    };

    return User;

  })();

  User.source = {};

}).call(this);
